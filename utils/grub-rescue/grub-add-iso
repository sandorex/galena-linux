#!/usr/bin/env bash
#
# grub-add-iso - add bootable iso file as menuentry in grub
#
# requires 7z/7zz lsblk

KERNEL_ARGS=
POSITIONAL_ARGS=()

while [ $# -gt 0 ]; do
    case $1 in
        --label)
            ARG_LABEL=$2
            shift 2
            ;;
        --partpath) # TODO update to partpath
            ARG_ROOTPATH=$2
            shift 2
            ;;
        --partuuid)
            ISO_PARTITION_UUID=$2
            shift 2
            ;;
        --show)
            SHOW=1
            shift
            ;;
        --)
            shift
            KERNEL_ARGS=$*
            break
            ;;
        --help|-h)
            HELP=1
            shift
            ;;
        --*|-*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            # save positional arg
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

7zip() {
    # support both official 7zip and the old deprecated p7zip
    if command -v 7zz; then
        7zz "$@"
    else
        7z "$@"
    fi
}

if [ -n "$1" ] && [ -n "$SHOW" ]; then
    TMPDIR=$(mktemp -d)
    grub_files=$(7zip l "$1" | grep grub.cfg | awk '{ print $6 }' | xargs)
    7zip x "-o$TMPDIR" "$1" $grub_files >/dev/null
    for i in $grub_files; do
        echo -e "\n$(tput setaf 4)$i:$(tput sgr0)"
        cat "$TMPDIR/$i"
    done
    exit
fi

if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -n "$HELP" ]; then
    cat <<EOF
Usage: $0 [<args...>] <iso file path> <linux path> <initrd path>

Arguments:
    --label <label>         label used for grub menuentry, defaults to ISO file
                            name
    --partpath <path>       path to ISO file used by grub if the file is on
                            another partition (separate boot partition for ex.)
    --partuuid <uuid>       Explicitly set UUID of partition where the ISO file
                            is stored, otherwise detected automatically using
                            lsblk
    --show                  Extracts all grub.cfg files from ISO, use this to
                            to get paths and kernel arguments for actual usage.
                            Only iso file path is required with this argument!
    --                      Stops parsing arguments and everything afterwards
                            is used as kernel arguments when booting

How to use:
    Run '$ $0 --show <iso file>' to get all menu entries and then extract which
    ones you want and then add them like for example
        $ $0 --label 'LiveCD Rescue' --partpath grub/iso/livecd.iso /boot/grub/iso/livecd.iso /live/vmlinuz-5.10.0-20-amd64 /live/initrd.img-5.10.0-20-amd64 -- boot=live components splash quiet

EOF
    exit
fi

if [ ! -f "$1" ]; then
    echo "Invalid file path '$1'"
    exit 1
fi

ISO_PATH=${1:?}
ISO_FILENAME=$(basename "$ISO_PATH")
LINUX=${2:?}
INITRD=${3:?}
LABEL=${ARG_LABEL:-$ISO_FILENAME}
ROOTPATH=${ARG_ROOTPATH:-$ISO_PATH}

if [ ! -f "$ISO_PATH" ]; then
    echo "File does not exist at path '$ISO_PATH'"
    exit 1
fi

if [ -z "$ISO_PARTITION_UUID" ]; then
    iso_dev_device=$(df "$ISO_PATH" | tail -n1 | awk '{ print $1 }')
    ISO_PARTITION_UUID=$(lsblk -o UUID "$iso_dev_device" | tail -n1)
    if [ -z "$ISO_PARTITION_UUID" ]; then
        echo "Could not get UUID of the partition, you can try providing it manually using --partuuid <uuid>"
        exit 1
    fi
fi

# recommended to be added with '25_' prefix to be below default option but above other operating systems
cat <<EOF
#!/bin/sh
echo "Added '$LABEL' (grub-add-iso)"
exec tail -n +4 \$0

menuentry "$LABEL" {
  insmod ext2
  set iso_path="$ROOTPATH"
  search --no-floppy --fs-uuid --set=root $ISO_PARTITION_UUID
  loopback loop (\$root)\$isofile
  linux (loop)$LINUX findiso=\$iso_path $KERNEL_ARGS
  initrd (loop)$INITRD
}
EOF

